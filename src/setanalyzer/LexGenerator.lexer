package setanalyzer;
import static setanalyzer.Token.*;


%%

%class Lexer
%type Token
%line
%column


DEFINICION = "DEFINICION"


CONJUNTO_UNIVERSO = "U"
LLAVE_ABIERTA     = "{"
LLAVE_CERRADA     = "}"
COMA              = ","
IGUAL             = "="

LETRA_MINUSCULA = [a-z] | "ñ"
LETRA_MAYUSCULA = [A-Z] | "Ñ"
NUMERO          = [0-9]+


OPERACION          = "OPERACION"
PARENTESIS_ABIERTO = "("
PARENTESIS_CERRADO = ")"


UNION         = "&"
INTERSECCION  = "$"
DIFERENCIA    = "/"
PRODUCTO_CRUZ = "*"
COMPLEMENTO   = "^c"




WHITE       = [\t]
SPACE      = " "
NUEVA_LINEA = \r|\n|\r\n|\t|\f



ELEMENTO = ({SPACE}*  {NUMERO} {SPACE}*) | ( {SPACE}* {LETRA_MINUSCULA}+  {SPACE}* )
ELEMENTO_COMA = {COMA} {ELEMENTO}
ELEMENTOS = {ELEMENTO} {ELEMENTO_COMA}+


ELEMENTOS_CONJUNTO = {SPACE}* {IGUAL} {SPACE}* {LLAVE_ABIERTA} ( {ELEMENTO} | {ELEMENTOS} | {SPACE}* )  {SPACE}* {LLAVE_CERRADA} {SPACE}*
CONJUNTO = {LETRA_MAYUSCULA} {ELEMENTOS_CONJUNTO}
CONJUNTO_UNIVERSO = "U" {ELEMENTOS_CONJUNTO}


LETRA_CONJUNTO  = {SPACE}* { LETRA_MAYUSCULA} {SPACE}*
OPERACION_CONJUNTO =  ({LETRA_CONJUNTO} ( {UNION} | {INTERSECCION} | {DIFERENCIA} | {PRODUCTO_CRUZ} ) {LETRA_CONJUNTO}) | {LETRA_CONJUNTO} {COMPLEMENTO}

%{
   public String lexeme;
   public int line_count;
   public int column_count;
%}

%%


//Definiciones especiales

{DEFINICION}                {line_count=yyline; column_count=yycolumn; return DEFINICION;}
{CONJUNTO_UNIVERSO}         {line_count=yyline; column_count=yycolumn; return CONJUNTO_UNIVERSO;}
{CONJUNTO}                  {line_count=yyline; column_count=yycolumn; return CONJUNTO;}
{OPERACION}                 {line_count=yyline; column_count=yycolumn; return OPERACION;}
{OPERACION_CONJUNTO}        {line_count=yyline; column_count=yycolumn; return OPERACION_CONJUNTO;}

//Definiciones por defecto
{NUEVA_LINEA}               {return NUEVA_LINEA;}
{WHITE}                     {/*Ignore*/}
{SPACE}                     {return SPACES;}



{PARENTESIS_ABIERTO} | {PARENTESIS_CERRADO} | {UNION} | {INTERSECCION} | {DIFERENCIA} | {PRODUCTO_CRUZ} | {COMPLEMENTO} | {LETRA_MINUSCULA}| {NUMERO} | {COMA} | {IGUAL} | {LLAVE_ABIERTA} | {LLAVE_CERRADA} | {LETRA_MAYUSCULA}  { line_count=yyline; column_count=yycolumn; return VOCABULARY; }


{SPACE}*  ({LETRA_MINUSCULA}* {NUMERO}+ {LETRA_MINUSCULA}+)+  {SPACE}*                          {return ERROR;}
{NUMERO}+ {SPACE}* {NUMERO}+                                                                    {return ERROR;}
{SPACE}*  (({LETRA_MINUSCULA}+ {NUMERO})+ | ({NUMERO}{LETRA_MINUSCULA}+)+)+ {SPACE}*            {return ERROR;}
{SPACE}*   ({LETRA_MAYUSCULA} {LETRA_MAYUSCULA}+)+ {SPACE}*                                     {return ERROR;}


({OPERACION} {OPERACION}+ )+              {return ERROR;}
. { line_count=yyline; column_count=yycolumn; return ERROR; }